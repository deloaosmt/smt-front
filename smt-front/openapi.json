{
    "security": [
      {
        "bearerAuth": []
      }
    ],
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },
      "schemas": {
        "Error": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "description": "Error code"
            },
            "status": {
              "type": "string",
              "description": "Error name"
            },
            "message": {
              "type": "string",
              "description": "Error message"
            },
            "errors": {
              "type": "object",
              "description": "Errors",
              "additionalProperties": {}
            }
          }
        },
        "PaginationMetadata": {
          "type": "object",
          "properties": {
            "total": {
              "type": "integer"
            },
            "total_pages": {
              "type": "integer"
            },
            "first_page": {
              "type": "integer"
            },
            "last_page": {
              "type": "integer"
            },
            "page": {
              "type": "integer"
            },
            "previous_page": {
              "type": "integer"
            },
            "next_page": {
              "type": "integer"
            }
          }
        },
        "UserRegister": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "password": {
              "type": "string",
              "minLength": 6
            },
            "full_name": {
              "type": "string",
              "maxLength": 255,
              "nullable": true
            }
          },
          "required": [
            "email",
            "password"
          ]
        },
        "User": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "readOnly": true
            },
            "email": {
              "type": "string",
              "format": "email"
            },
            "full_name": {
              "type": "string",
              "maxLength": 255,
              "nullable": true
            },
            "is_active": {
              "type": "boolean",
              "readOnly": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "last_login": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            }
          },
          "required": [
            "email"
          ]
        },
        "UserResponse": {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/components/schemas/User"
            },
            "token": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "UserLogin": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "format": "email"
            },
            "password": {
              "type": "string"
            }
          },
          "required": [
            "email",
            "password"
          ]
        },
        "TokenResponse": {
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string"
            }
          },
          "required": [
            "access_token"
          ]
        },
        "LogoutResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "RevisionCreate": {
          "type": "object",
          "properties": {
            "revision_number": {
              "type": "integer",
              "minimum": 0
            },
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            }
          },
          "required": [
            "revision_number",
            "title"
          ]
        },
        "Revision": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "readOnly": true
            },
            "revision_number": {
              "type": "integer",
              "minimum": 0
            },
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "subproject_id": {
              "type": "integer"
            }
          },
          "required": [
            "revision_number",
            "subproject_id",
            "title"
          ]
        },
        "RevisionResponse": {
          "type": "object",
          "properties": {
            "revision": {
              "$ref": "#/components/schemas/Revision"
            }
          }
        },
        "RevisionListResponse": {
          "type": "object",
          "properties": {
            "revisions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Revision"
              }
            }
          }
        },
        "RevisionUpdate": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            }
          }
        },
        "RevisionDeleteResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "ProjectCreate": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            }
          },
          "required": [
            "title"
          ]
        },
        "Project": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "readOnly": true
            },
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            }
          },
          "required": [
            "title"
          ]
        },
        "ProjectResponse": {
          "type": "object",
          "properties": {
            "project": {
              "$ref": "#/components/schemas/Project"
            }
          }
        },
        "ProjectListResponse": {
          "type": "object",
          "properties": {
            "projects": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Project"
              }
            }
          }
        },
        "ProjectUpdate": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            }
          }
        },
        "ProjectDeleteResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "SubprojectCreate": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            }
          },
          "required": [
            "title"
          ]
        },
        "Subproject": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "readOnly": true
            },
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            },
            "project_id": {
              "type": "integer"
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            }
          },
          "required": [
            "project_id",
            "title"
          ]
        },
        "SubprojectResponse": {
          "type": "object",
          "properties": {
            "subproject": {
              "$ref": "#/components/schemas/Subproject"
            }
          }
        },
        "SubprojectListResponse": {
          "type": "object",
          "properties": {
            "subprojects": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Subproject"
              }
            }
          }
        },
        "SubprojectUpdate": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "description": {
              "type": "string",
              "maxLength": 1000,
              "nullable": true
            }
          }
        },
        "DocumentType": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            }
          },
          "required": [
            "type"
          ]
        },
        "DocumentTypesResponse": {
          "type": "object",
          "properties": {
            "document_types": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DocumentType"
              }
            }
          }
        },
        "FileUpload": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 255
            },
            "document_type": {
              "type": "string",
              "maxLength": 10
            },
            "revision_id": {
              "type": "integer",
              "nullable": true
            },
            "project_id": {
              "type": "integer",
              "nullable": true
            },
            "subproject_id": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "document_type",
            "name"
          ]
        },
        "File": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "readOnly": true
            },
            "filename": {
              "type": "string",
              "maxLength": 255
            },
            "name": {
              "type": "string",
              "maxLength": 255
            },
            "mime_type": {
              "type": "string",
              "maxLength": 127
            },
            "file_size": {
              "type": "integer",
              "minimum": 0
            },
            "s3_key": {
              "type": "string",
              "maxLength": 1024
            },
            "s3_bucket": {
              "type": "string",
              "maxLength": 255
            },
            "document_type": {
              "type": "string",
              "maxLength": 10,
              "nullable": true
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "revision_id": {
              "type": "integer",
              "nullable": true
            },
            "project_id": {
              "type": "integer",
              "nullable": true
            },
            "subproject_id": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "file_size",
            "filename",
            "mime_type",
            "name",
            "s3_bucket",
            "s3_key"
          ]
        },
        "FileResponse": {
          "type": "object",
          "properties": {
            "file": {
              "$ref": "#/components/schemas/File"
            }
          }
        },
        "FileListResponse": {
          "type": "object",
          "properties": {
            "files": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/File"
              }
            }
          }
        },
        "FileDeleteResponse": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          },
          "required": [
            "message"
          ]
        },
        "DownloadUrlResponse": {
          "type": "object",
          "properties": {
            "download_url": {
              "type": "string"
            },
            "expires_in": {
              "type": "integer"
            }
          },
          "required": [
            "download_url",
            "expires_in"
          ]
        },
        "DiffCreate": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 255
            },
            "doc_id_left": {
              "type": "integer",
              "minimum": 1
            },
            "doc_id_right": {
              "type": "integer",
              "minimum": 1
            },
            "target_revision_id": {
              "type": "integer",
              "nullable": true
            },
            "target_subproject_id": {
              "type": "integer",
              "nullable": true
            },
            "target_project_id": {
              "type": "integer",
              "nullable": true
            }
          },
          "required": [
            "doc_id_left",
            "doc_id_right",
            "name"
          ]
        },
        "DiffResponse": {
          "type": "object",
          "properties": {
            "file": {
              "$ref": "#/components/schemas/File"
            }
          }
        }
      },
      "responses": {
        "UNPROCESSABLE_ENTITY": {
          "description": "Unprocessable Entity",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        },
        "DEFAULT_ERROR": {
          "description": "Default error response",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Error"
              }
            }
          }
        }
      }
    },
    "paths": {
      "/api/users/register": {
        "post": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "409": {
              "description": "user already exists"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRegister"
                }
              }
            }
          },
          "summary": "register a new user.",
          "tags": [
            "users"
          ]
        }
      },
      "/api/users/login": {
        "post": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "401": {
              "description": "invalid credentials"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserLogin"
                }
              }
            }
          },
          "summary": "login user.",
          "tags": [
            "users"
          ]
        }
      },
      "/api/users/refresh": {
        "post": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "401": {
              "description": "invalid credentials"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TokenResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "refresh access token.",
          "tags": [
            "users"
          ]
        }
      },
      "/api/users/logout": {
        "post": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogoutResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "logout user.",
          "tags": [
            "users"
          ]
        }
      },
      "/api/users/info": {
        "get": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "401": {
              "description": "user not found or inactive"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "get current user info.",
          "tags": [
            "users"
          ]
        }
      },
      "/api/subprojects/{subproject_id}/revisions/create": {
        "post": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "409": {
              "description": "revision already exists"
            },
            "404": {
              "description": "subproject not found"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevisionResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevisionCreate"
                }
              }
            }
          },
          "summary": "create a new revision.",
          "tags": [
            "revisions"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "subproject_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ]
      },
      "/api/subprojects/{subproject_id}/revisions": {
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer",
                "default": 0,
                "minimum": 0
              },
              "required": false
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "default": 1000,
                "minimum": 1,
                "maximum": 1000
              },
              "required": false
            }
          ],
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "subproject not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevisionListResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "list revisions for a subproject.",
          "tags": [
            "revisions"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "subproject_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ]
      },
      "/api/revisions/{revision_id}": {
        "get": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "revision not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevisionResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "get a specific revision.",
          "tags": [
            "revisions"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "revision_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "put": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "revision not found"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevisionResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RevisionUpdate"
                }
              }
            }
          },
          "summary": "update a revision.",
          "tags": [
            "revisions"
          ]
        },
        "delete": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "revision not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RevisionDeleteResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "delete a revision.",
          "tags": [
            "revisions"
          ]
        }
      },
      "/api/projects/create": {
        "post": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "409": {
              "description": "project already exists"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCreate"
                }
              }
            }
          },
          "summary": "create a new project.",
          "tags": [
            "projects"
          ]
        }
      },
      "/api/projects": {
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer",
                "default": 0,
                "minimum": 0
              },
              "required": false
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "default": 1000,
                "minimum": 1,
                "maximum": 1000
              },
              "required": false
            }
          ],
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectListResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "list all projects.",
          "tags": [
            "projects"
          ]
        }
      },
      "/api/projects/{project_id}": {
        "get": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "project not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "get a specific project.",
          "tags": [
            "projects"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "put": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "project not found"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectUpdate"
                }
              }
            }
          },
          "summary": "update a project.",
          "tags": [
            "projects"
          ]
        },
        "delete": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "project not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectDeleteResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "delete a project.",
          "tags": [
            "projects"
          ]
        }
      },
      "/api/projects/{project_id}/subprojects/create": {
        "post": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "409": {
              "description": "subproject already exists"
            },
            "404": {
              "description": "project not found"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubprojectResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubprojectCreate"
                }
              }
            }
          },
          "summary": "create a new subproject.",
          "tags": [
            "projects"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ]
      },
      "/api/projects/{project_id}/subprojects": {
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer",
                "default": 0,
                "minimum": 0
              },
              "required": false
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "default": 1000,
                "minimum": 1,
                "maximum": 1000
              },
              "required": false
            }
          ],
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "project not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubprojectListResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "list subprojects for a project.",
          "tags": [
            "projects"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ]
      },
      "/api/subprojects/{subproject_id}": {
        "get": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "subproject not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubprojectResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "get a specific subproject.",
          "tags": [
            "projects"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "subproject_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ],
        "put": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "subproject not found"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubprojectResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubprojectUpdate"
                }
              }
            }
          },
          "summary": "update a subproject.",
          "tags": [
            "projects"
          ]
        },
        "delete": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "subproject not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProjectDeleteResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "delete a subproject.",
          "tags": [
            "projects"
          ]
        }
      },
      "/api/document-types": {
        "get": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocumentTypesResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "get list of available document types.",
          "tags": [
            "files"
          ]
        }
      },
      "/api/files": {
        "post": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "409": {
              "description": "file already exists"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FileResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/FileUpload"
                }
              }
            }
          },
          "summary": "create a new file.",
          "tags": [
            "files"
          ]
        },
        "get": {
          "parameters": [
            {
              "in": "query",
              "name": "offset",
              "schema": {
                "type": "integer",
                "default": 0,
                "minimum": 0
              },
              "required": false
            },
            {
              "in": "query",
              "name": "limit",
              "schema": {
                "type": "integer",
                "default": 1000,
                "minimum": 1,
                "maximum": 1000
              },
              "required": false
            }
          ],
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FileListResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "list files with optional filters.",
          "tags": [
            "files"
          ]
        }
      },
      "/api/files/{file_id}": {
        "delete": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "file not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FileDeleteResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "delete a file.",
          "tags": [
            "files"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ]
      },
      "/api/files/{file_id}/info": {
        "get": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "file not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FileResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "get file information.",
          "tags": [
            "files"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ]
      },
      "/api/files/{file_id}/download": {
        "get": {
          "responses": {
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "file not found"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DownloadUrlResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "summary": "get file download url.",
          "tags": [
            "files"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0
            }
          }
        ]
      },
      "/api/diff": {
        "post": {
          "responses": {
            "422": {
              "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
            },
            "500": {
              "description": "internal server error"
            },
            "404": {
              "description": "file not found"
            },
            "400": {
              "description": "validation error"
            },
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DiffResponse"
                  }
                }
              }
            },
            "default": {
              "$ref": "#/components/responses/DEFAULT_ERROR"
            }
          },
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiffCreate"
                }
              }
            }
          },
          "summary": "create a diff between two documents.",
          "tags": [
            "analyze"
          ]
        }
      }
    },
    "info": {
      "title": "AOSMT Backend API",
      "version": "v1"
    },
    "tags": [
      {
        "name": "users",
        "description": "Operations on users"
      },
      {
        "name": "revisions",
        "description": "Operations on revisions"
      },
      {
        "name": "projects",
        "description": "Operations on projects and subprojects"
      },
      {
        "name": "files",
        "description": "Operations on documents and files"
      },
      {
        "name": "analyze",
        "description": "Operations on document analysis and diff generation"
      }
    ],
    "openapi": "3.0.2"
  }
